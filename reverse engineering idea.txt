Colored screen with all 64 bits possible in a frame and the ability to select ranges graphically to designate them as a data item.
This screen would be where the data definitions are edited. Have the ability to load and save the definitions and then apply them
to the incoming data to turn it into a decoded format. 

Reverse engineering helper by asking the user to set a baseline then do actions at beeps. Say, touch nothing then when it beeps
push the lock button then the next time it beeps push unlock then it beeps again and you push lock. During this the system
will process the frames to see if there is a frame that changes reliably when the lock button is pressed or if a new frame shows up.
Or, don't push accelerator then slowly push it at beep then at beep hold it as steady as possible then at next beep slowly back off.
Four types of detectors: 
single toggle - A single event happens back and forth - door lock, brake press detection, etc
multi-toggle - The same basic message has multiple states - gear shifter, wind shield wipers, fan, etc
ramp - The value can fluctuate over a range that is easily controllable up/down - accelerator pedal, RPM, power
taper - The value can change over a range but somewhat slowly - temperature, voltage, etc

For the single, multi, etc it should be possible to either use tone command or have it toggle a given output (or range of outputs)

Flo-View - Allow user to select one frame ID from the list of all IDs seen so far. Then push a button to set the reference
point (or allow all 8 bytes to be typed in). From this point on the 8x8 bit field plus 8 data byte values will update
according to the current data. This will show which bits are changing and somewhat of the pattern in which they change. 
There should be a way to play forward the frames at a slower speed than they really come in so that it is easier
to find the patterns. Also, it should be possible to either set a reference or to always use the previous frame as reference 
and maybe to switch between those two at will to find patterns. Keep a buffer of 1000 frames. When capture is selected the buffer
starts to fill up. At any time the user can push play to play them at a specific rate (drop down list or slider) with a pause button
to stop. Also, single step buttons for left/right and a view that shows where someone is in the buffer.

Guesstomater - Allow the user to specify the value of something they'd like to find. For instance, maybe they know the RPM is around
1100RPM. So, they enter that in. Then they rev up to 2000RPM, hold it there, and enter that in. After several values are entered in
the system will try to find where these values might be. It should handle searching for bias and scaling factor. This should be possible
since we'll know the offset between values the user typed in. In the above instance, 1100 and 2000 means that the value changed by about 
900 out of 1100/2000 so look for frames where the value changed by this ratio. Once we find a frame where the data value changed by the
proper ratio we can then find the bias. And the difference in actual ratio gives the scaling factor. The fuzzyiness of matching should
be able to be set. This all is useful for ramp or taper values where you know the approximate reading. This helps to narrow it down
more quickly. For this screen what we need is a way to start / stop the capture, a way to enter in the expected value at a given point
in time, and a way to set the fuzziness. After that, when the system is running it'll try to make matches. If it finds a possible
match it'll output information about this match.

A potential kink is that the values entered have to be multiplied and divided to find the real values. For instance, 68.5 degrees
could be stored as 685 for all we know. That means that the value could be 1 byte or 2 bytes. We have no idea. For each guess
we've got to recalculate the required bytes

But, how to efficiently implement something like this guessing system? It has to try to match against single or multiple bytes across
potentially huge numbers of frames. One way is to do this: 
- First of all, do nothing until at least two search items have been entered in.
- Then, Start at the first search item. Find the frame location for the second item as well
- For each byte (or 16 bit value or 32 bit value) try to find a frame with the same ID but in the next search item's zone.
- Now, see if the same byte/16/32 in that frame seems to be within tolerance of the value from the first item.
- Here is a complication. There might be a third or fourth or fifth entry. So, do the process over. Use the location from the
  first scan and try to find the same frame ID in the third grouping. Now, see if the given operation we used for the first two
  also yields a match for this third one. Keep doing this for every search entry until the end. If at the end we have something
  that matched every criteria then it is a potential match and should be put in the tree.

Because this is a very intensive process do not try to do it as frames come in. Instead wait until the user selects to
quit capture. At that point reprocess the input list and redo the potential matches. But, let them restart capture if they
aren't happy yet.


Once guesses are made about the value of bits for a frame it should be possible to show details for a frame by clicking
on it or something to bring up a screen that shows the details worked out. This allows frames to be decoded and the
decoding checked for potential accuracy.

